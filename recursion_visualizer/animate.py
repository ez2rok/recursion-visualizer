# AUTOGENERATED! DO NOT EDIT! File to edit: ../03_animate.ipynb.

# %% auto 0
__all__ = ['get_node_and_edge_coordinates']

# %% ../03_animate.ipynb 2
from typing import List, Dict

# %% ../03_animate.ipynb 3
def get_node_and_edge_coordinates(
  edges: Dict[tuple, str], # map from an edge to label (an edge is a tuple of node ids)
  ) -> List[List[int]]: # list of x and y coordinates for placing nodes and edges on 2D grid
  """Given a map of edges to labels, create a `networkx` graph and use its
  layout function to return a list of x and y coordinates for placing nodes and edges on
  a 2D grid."""

  # initialize directional graph
  DG = nx.DiGraph()
  DG.add_edges_from(edges)

  # get the (x, y) coordinates of each node in the graph
  coordinates = nx.drawing.nx_agraph.graphviz_layout(DG, prog="dot", root=0)

  # record the (x, y) coordinates of each node
  node_x, node_y = [], []
  for x, y in coordinates.values():
    node_x.append(x)
    node_y.append(y)

  # record the positions of each edge
  edge_x, edge_y = [], []
  for edge in DG.edges():
        x0, y0 = coordinates[edge[0]]
        x1, y1 = coordinates[edge[1]]
        edge_x += [x0, x1, None]
        edge_y += [y0, y1, None]

  return node_x, node_y, edge_x, edge_y
